<div id="motion-planning-toolbox-logo" align="center">
    <br />
    <img src="https://raw.githubusercontent.com/tschmoderer/motion-planning-toolbox/main/docs/img/icons/128x128/rocket.png" alt="Motion Planning ToolBox Logo" width="128" id="motion-planning-toolbox-logo-img"/>
    <h1>Motion Planning Toolbox</h1>
    <h4>A C++ toolbox for the computation of trajectories of control systems</h4>
    <hr/>
</div>


[![language-cpp](https://img.shields.io/badge/language-C%2B%2B-blue)](https://github.com/tschmoderer/motion-planning-toolbox/search?l=c%2B%2B&type=code) [![build](https://github.com/tschmoderer/motion-planning-toolbox/actions/workflows/cmake.yml/badge.svg?branch=main)](https://github.com/tschmoderer/motion-planning-toolbox/actions/workflows/cmake.yml) [![docs](https://github.com/tschmoderer/motion-planning-toolbox/actions/workflows/doxygen.yml/badge.svg?branch=main)](https://tschmoderer.github.io/motion-planning-toolbox/html/index.html) [![License](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://github.com/tschmoderer/motion-planning-toolbox/blob/master/LICENSE) [![Lib Version](https://img.shields.io/badge/Library-v@CMAKE_PROJECT_VERSION@-blue)](https://github.com/tschmoderer/motion-planning-toolbox/releases) [![Gui Version](https://img.shields.io/badge/GUI-v@CMAKE_GUI_VERSION@-blue)](https://github.com/tschmoderer/motion-planning-toolbox/releases)


This repository contains the code of the **controltlbx** library that can be used as a standalone library or via the application executable that provides a GUI. 

![GUI v0.0.1](.github/img/gui/gui0.0.1.png)

Table of contents
=================

- [Table of contents](#table-of-contents)
- [Purposes](#purposes)
  - [Library](#library)
  - [Application](#application)
- [Examples](#examples)
  - [Van-der-Pol Oscillator](#van-der-pol-oscillator)
- [Documentation](#documentation)
- [Build \& Install](#build--install)
  - [Requirement](#requirement)
  - [Unix](#unix)
- [Credits](#credits)

# Purposes

## Library 

The purpose of the **controltlbx** is to provide an efficient way of computing trajectories of control systems.  It's ultimate goal is to be a solver for (optimal) control design, i.e. designing a control that achieve a certain (optimal) trajectory. 

*Features* : 

- Simulation of nonlinear dynamical systems 
- Simulation of control-nonlinear dynamical systems 
  - Linear control (a specification of the above) 

*Planned features* : 

* Motion Planing for a state configuration 
* Motion planning of a full trajectory 
* Optimal Control problem solver 
* Delayed ODE
* Real time control design 

## Application

The application configures and launches experiments (simulations) from a single *.json* file. The GUI is a wrapper around this program that build the *.json* configuration file and post-processes the results . 

# Examples

All examples presented below can be configure in a single *.json* file and will therefore be configured and launched one after another.

## Van-der-Pol Oscillator

This section describe a simulation of the Van derPol oscillator. The dynamical system is as follows: 
$$
\begin{pmatrix}\dot{x}_1 \\ \dot{x}_2 \end{pmatrix} = \begin{pmatrix}{x}_2 \\ \mu(1-(x_1)^2)x_2-x_1 \end{pmatrix}.
$$

<details><summary>Configuration file : <i>exp.json</i> </summary>
<p>


```json
{
    "experiences": [
   {
            "type": "dynamical",
            "name": "vanderpol",
            "run": true,
            
            "dimensions": {    
                "state_dim": 2,
            },

            "dynamics": {
                "parameters": {
                    "mymu": 1
                },

                "f": [
                    "dxdt(0) = x(1);",
                    "dxdt(1) = mymu*(1-x(0)*x(0))*x(1)-x(0);"
                ],

                "dfdx": [
                    "dxdt_dx(0,1) = 1;",
                    "dxdt_dx(1,0) = -mymu*x(1)*x(0)/2.-1;",
                    "dxdt_dx(1,1) = mymu*(1-x(0)*x(0));"
                ]
            },
            
            "trajectories": {
                "timesteps": {
                    "method": "linspace", 
                    "linspace": {
                        "tmin": 0, 
                        "tmax": 20, 
                        "nbT": 513
                    }
                }, 
                "x0": [
                    [2, 0], 
                    [-4, 1],
                    ["sqrt(2)", "1/2"]
                ]
            },

            "methods": {
                "ode": {
                    "method": "RK4", 
                    "parameters": {}
                }, 

                "interpolation": {
                    "method": "INTERP_LINEAR", 
                    "parameters": {
                        "extend_left": "EXTEND_ZERO", 
                        "extend_right": "EXTEND_ZERO"
                    }
                }
            },
            
            "outputs": {
                "traj": {
                    "cli": false,
                    "file": {
                        "yn": true,
                        "dir": "./results/",
                        "subdir": "data/",
                        "filename": "trajectory.dat",
                        "time-filename": "time.dat"
                    }
                }, 

                "cntrl": null
            }, 

            "postprocess": {
                "plots": [
                    {
                        "data": {
                            "x": 0,
                            "y": 1,
                            "nb": 1
                        },
                        "type": "line", 
                        "title": "Evolution the x_1 coordinate over time for the first initial condition",
                        "xlabel": "Time",
                        "ylabel": "x_1",
                        "output": {
                            "gui": false, 
                            "file": {
                                "yn": true,              
                                "dir": "./results/", 
                                "subdir": "plots/",
                                "filename": "x1_coordinate.png"
                            }
                        }

                    }, 

                    {
                        "data": {
                            "x": 1,
                            "y": 2,
                            "nb": 0
                        },
                        "type": "line",
                        "title": "Phase diagram of all initial conditions",
                        "xlabel": "x_1",
                        "ylabel": "x_2",
                        
                        "output": {
                            "gui": true,
                            "file": {
                                "yn": true, 
                                "dir": "./results/", 
                                "subdir": "plots/",
                                "filename": "phase.png"
                            }
                        }
                    },

                    {
                        "data": {
                            "x": 0,
                            "y": 2,
                            "nb": 0
                        },
                        "type": "line",
                        "title": "Evolution the x_2 coordinate over time for all initial conditions",
                        "xlabel": "time",
                        "ylabel": "x_2",
                        
                        "output": {
                            "gui": true,
                            "file": {
                                "yn": true, 
                                "dir": "./results/", 
                                "subdir": "plots/",
                                "filename": "x2_coordinate_all.png"
                            }
                        }
                    }
                ]
            }
   }
}
```

</p>
</details>

Then using the following commands

```bash
mkdir build
cd build
cmake ..
make 
cd ../app
./mpp_app ./exp.json 
python3 postprocess.py exp.json
```

produce :

<table>
  <tr>
    <td> <img src="https://github.com/tschmoderer/motion-planning-toolbox/blob/b787af63644cbee5f076f1db201586720262889f/.github/img/vanderpol/phase.png"  alt="phase.png" ></td>
    <td><img src="https://github.com/tschmoderer/motion-planning-toolbox/blob/b787af63644cbee5f076f1db201586720262889f/.github/img/vanderpol/x1_coordinate.png" alt="x1_coordinate.png"></td>
   </tr> 
    <tr>
    </tr>
   <tr>
      <td><img src="https://github.com/tschmoderer/motion-planning-toolbox/blob/b787af63644cbee5f076f1db201586720262889f/.github/img/vanderpol/x2_coordinate_all.png" alt="x2_coordinate_all.png"></td>
  </tr>
</table>

The workflow of the app is as follows:

```mermaid
flowchart LR
    A(exp.json) --> B(./app)
    B -->|Configure| C(exp.hpp)
    B -->|Compile| D(exp.cpp)
    C --> D 
    B -->|Run| E(./exp)
    D --> E
    E -->|Output| F(data)
    A --> G(postprocess.py)
    F --> G
    G -->|Produce| H(Plots)
```

# Documentation 

The library documentation is generated with doxygen and automatically served at [link](https://tschmoderer.github.io/motion-planning-toolbox/html/index.html). In particular, you can find the documentation for the structure of the *.json* configuration file at [link](https://tschmoderer.github.io/motion-planning-toolbox/html/index.html/configuration-json).

# Build & Install

## Requirement 
* Eigen 

```bash
sudo apt install libeigen3-dev
```

* For postprocessing : python3, numpy, matplotlib

```bash
sudo apt install python3
pip3 install numpy matplotlib
```


## Unix 

Require cmake & g++

Optional valgrind for memcheck

```bash
git clone https://github.com/tschmoderer/motion-planning-toolbox.git 
cd motion-planning-toolbox
mkdir build
cd build
cmake ..
make
make test
(Opt) make memcheck
```

# Credits

A main inspiration for this software (and its architecture) mostly come from the [control-toolbox](https://github.com/ethz-adrl/control-toolbox), copyright by ETH Zurich - BSD-2 License

Portions of this software are copyright of their respective authors :

- Documentation theme is made by [jothepro](https://github.com/jothepro/doxygen-awesome-css) - MIT License
- Icon is *rocket.svg* distributed by [lucide](https://github.com/lucide-icons/lucide) - ISC License
- Linear Algebra library is [Eigen](https://eigen.tuxfamily.org/) - Apache License
