/**
* @file @CURFILENAME@
* @author @AUTHOR@ (@AUTHOR_MAIL@)
* @version @PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@.@PROJECT_VERSION_PATCH@
* @date @TODAY@
* @copyright Copyright (c) @YEAR@. All rights reserved. This project is released under the @LICENSE@.
*/
/**
 * @brief
*/

#ifndef INTERPOLATOR_1D_H
#define INTERPOLATOR_1D_H

#include "../utils.h"
#include "../types/time/timeVector.h"

/**
 * @brief enumeration of the different interpolation methods in 1D
 * 
 */
enum interpolation_method_t : uint8_t {
    INTERP_CONSTANT_LEFT, 
    INTERP_CONSTANT_RIGHT, 
    INTERP_NEAREST,
    INTERP_LINEAR
};

/**
 * @brief Enumeration for the different types of extensions possible 
 * When interpolated tume is outside of the prescribed times interval then 
 * either we return 0
 * or we return the same value as the data at the nearest border of the nterval
 */
enum extend_t : uint8_t {
    EXTEND_ZERO,
    EXTEND_CONSTANT 
};

/**
 * @class Interpolator1D
 * @brief Class describing a 1D interpolation operator 
 * extend from the general Interpolator class
 */
class Interpolator1D {
    public: 
        /* CONSTRUCTORS */
        Interpolator1D(); 
        Interpolator1D(interpolation_method_t , extend_t , extend_t ) ;
        Interpolator1D(const Interpolator1D & );

        /* DESTRUCTOR */
        ~Interpolator1D();

        /* ACCESSORS */
        void set_method(interpolation_method_t );
        void set_exleft(extend_t ); 
        void set_exright(extend_t );

        extend_t get_exleft() const;
        extend_t get_exright() const;

        /* METHODS */     
        /**
            * @brief 
            * 
            * @param times 
            * @param data 
            * @param t 
            * @return U 
        */
       template<class T, typename U = SCALAR>
        U interp1d(const TimeVector * times, const T * data, Time_t t) const {
            assert(times->size() == data->size());
            // Case time t is less than minimal interpolation time
            if (t < (*times)[0]) {
                return this->interp1D_extend_left<T, U>(times, data , t);
            }

            // Case time t is bigger than maximal interpolation time
            if (t > (*times)[times->size()-1]) {
                return this->interp1D_extend_right<T, U>(times, data, t);
            }

            // Case time t is equal than minimal interpolation time
            if (t == (*times)[0]) {
                return (*data)[0];
            }

            // Case time t is equal than maximal interpolation time
            if (t == (*times)[times->size()-1]) {
                return (*data)[times->size()-1];
            }

            TIME_VECTOR_DIM_T idx_inf = times->nearest(t); 

            // Case time t is equal than interpolation time at index idx_inf
            if (t == (*times)[idx_inf]) {
                return (*data)[idx_inf];
            }

            switch (this->i_method) {   
                case INTERP_CONSTANT_LEFT:
                    return this->interp1d_constant_left<T, U>(times, data, t, idx_inf);
                    break;

                case INTERP_CONSTANT_RIGHT:
                    return this->interp1d_constant_right<T, U>(times, data, t, idx_inf);
                    break;

                case INTERP_NEAREST:
                    return this->interp1d_nearest<T, U>(times, data, t, idx_inf);
                    break;    
                
                default: // default is linear
                    return this->interp1d_linear<T, U>(times, data, t, idx_inf);
                    break;
            }

            return 0.;
        }

        template<class T, typename U = SCALAR>
        T interp1d(const TimeVector * times, const T * data, const TimeVector * t) const {
            T res(t->size()); 
            for (int i = 0; i < t->size(); i++) {
                res(i) = this->interp1d(times, data, (*t)(i)); 
            }
            return res;
        }

    private: 
        /* ATTRIBUTES */
        interpolation_method_t i_method;
        extend_t extend_left_method;  /*!< Method for interpolating left from the interval of prescribed times. */
        extend_t extend_right_method; /*!< Method for interpolating right from the interval of prescribed times. */

        /* METHODS */
        /**
         * @brief Interpolate with a linear interpolation between the values of the prescribed data at the two adjacent neighbours
         * @param times Prescribed dicrete times
         * @param data Prescribed data at times 
         * @param t Interpolation t 
         * @param idx_inf index i such that $$t\in [t_i, t_{i+1}[
         * @return double 
         */
        template<class T, typename U>
        U interp1d_linear(const TimeVector * times, const T * data, Time_t t, TIME_VECTOR_DIM_T idx_inf) const {
            double dx = (*times)[idx_inf+1] - (*times)[idx_inf]; 
            double a = ((*data)[idx_inf+1] - (*data)[idx_inf]) / dx; 
            double b = ((*times)[idx_inf+1] * (*data)[idx_inf] -(*times)[idx_inf] * (*data)[idx_inf+1]) / dx;
            return a*t+b; 
        }

        /**
         * @brief Interpolate with the value at the nearest neighbour
         * @param times Prescribed dicrete times
         * @param data Prescribed data at times 
         * @param t Interpolation t 
         * @param idx_inf index i such that $$t\in [t_i, t_{i+1}[
         * @return double 
         */
        template<class T, typename U>
        U interp1d_nearest(const TimeVector * times, const T * data, Time_t t, TIME_VECTOR_DIM_T idx_inf) const {
            double mid = ((*times)[idx_inf+1] + (*times)[idx_inf]) / 2.; 
            if (t <= mid) {
                return this->interp1d_constant_left<T,U>(times, data, t, idx_inf);
            } else {
                return this->interp1d_constant_right<T,U>(times, data, t, idx_inf);
            }
        }

        /**
         * @brief Interpolate with the value at the nearest left neighbour
         * @param times Prescribed dicrete times
         * @param data Prescribed data at times 
         * @param t Interpolation t 
         * @param idx_inf index i such that $$t\in [t_i, t_{i+1}[
         * @return double 
         */
        template<class T, typename U>
        U interp1d_constant_left(const TimeVector * times, const T * data, Time_t t, TIME_VECTOR_DIM_T idx_inf) const {
            return (*data)[idx_inf]; 
        }

        /**
         * @brief Interpolate with the value at the nearest right neighbour
         * @param times Prescribed dicrete times
         * @param data Prescribed data at times 
         * @param t Interpolation t 
         * @param idx_inf index i such that $$t\in [t_i, t_{i+1}[
         * @return double 
         */
        template<class T, typename U>
        U interp1d_constant_right(const TimeVector * times, const T * data, Time_t t, TIME_VECTOR_DIM_T idx_inf) const {
            return (*data)[idx_inf+1]; 
        }

       /**
         * @brief Compute interpolated value for a time t outside (left) of the interval 
         * @param times Prescribed dicrete times
         * @param data Prescribed data at times 
         * @param t Interpolation t 
         * @return double value interpolated according to the value of the attribute extend_left_method
         */
        template<class T, typename U>
        U interp1D_extend_left(const TimeVector * times, const T * data, Time_t t) const {
            switch (this->extend_left_method) {
                case EXTEND_CONSTANT:
                    return (*data)[0];
                    break;
        
                default: // extend by 0
                    return 0.;
                    break;
            }
        }

        /**
         * @brief Compute interpolated value for a time t outside (right) of the interval 
         * @param times Prescribed dicrete times
         * @param data Prescribed data at times 
         * @param t Interpolation t 
         * @return double value interpolated according to the value of the attribute extend_right_method
         */
        template<class T, typename U>
        U interp1D_extend_right(const TimeVector * times, const T * data, Time_t t) const{
            switch (this->extend_right_method) {
                case EXTEND_CONSTANT:
                    return (*data)[data->size()-1];
                    break;
                
                default: // extend by 0
                    return 0.;
                    break;
            }
        }
};

#endif