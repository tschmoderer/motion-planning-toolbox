/**
* @file @CURFILENAME@
* @author @AUTHOR@ (@AUTHOR_MAIL@)
* @version @PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@.@PROJECT_VERSION_PATCH@
* @date @TODAY@
* @copyright Copyright (c) @YEAR@. All rights reserved. This project is released under the @LICENSE@.
*/
/**
 * @brief
*/

#ifndef CONTROLTLBX_OUTPUTHELPER_H
#define CONTROLTLBX_OUTPUTHELPER_H

#include <Eigen/Dense>
#include "../controller/controls.h"
#include "../types/trajectory/trajectory.h"

#include <string>
#include <iostream>
#include <fstream>
#include <filesystem> 

/* NAMESPACES */
using namespace std;
namespace fs = std::filesystem;

/* COMMON FORMAT */
const static Eigen::IOFormat CSVFormat(Eigen::FullPrecision, Eigen::DontAlignCols, ",", "\n");

/* CUSTOM TYPE */
enum out_t : uint8_t {
    trajectory, 
    control
};

/**
 * @brief A class to standartize the output format of 
 * - Controls
 * - Trajectories
 * @todo Add more object support
 */
class OutputHelper {
    public: 
        /* const values */
        inline static const string traj_fname = "trajectory.dat";
        inline static const string ctrl_fname = "controls.dat";
        inline static const string time_fname = "time.dat";

        /* CONSTRUCTORS */
        OutputHelper(const Controls & , string = "./" ); 
        OutputHelper(const Trajectory & , string = "./" );

        /* DESTRUCTOR */
        ~OutputHelper();

        /* ACCESSORS */
        void set_out_directory(string ); 
        //void set_DataFile(string ); 
        //void set_TimeFile(string ); 
        OutputHelper format(Eigen::IOFormat ); 

        /* METHODS */
        void save(int ) const;
        
        /* OPERATORS */
        friend std::ostream & operator<<(std::ostream & , const OutputHelper & );

    private:
        /* ATTRIBUTES */
        Eigen::IOFormat fmt = Eigen::IOFormat();
        TimeVector time_;
        Matrix<>   data_;

        out_t type_; 

        // output directory
        string out_dir_;

        // data file info
        //string out_file_;
       // string filename_;
       // string fileext_;

        // timestamps data file info
       // string ts_out_file_;
       // string ts_filename_;
       // string ts_fileext_;

        /* PRIVATE METHOD */
        Matrix<>  make_data() const; 
        //void set_output_structure(const string );
        //void set_output_structure_ts(const string );
        //void create_output_dir() const; 
        string create_output_dir(int ) const;
        //string exp_filename(int ) const;
        //string exp_filename_ts(int ) const;
};

#endif