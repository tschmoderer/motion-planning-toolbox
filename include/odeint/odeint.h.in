/**
* @file @CURFILENAME@
* @author @AUTHOR@ (@AUTHOR_MAIL@)
* @version @PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@.@PROJECT_VERSION_PATCH@
* @date @TODAY@
* @copyright Copyright (c) @YEAR@. All rights reserved. This project is released under the @LICENSE@.
*/
/**
 * @brief
*/

#ifndef ODEINT_H
#define ODEINT_H

// Macros definitions

// Additional library
#include <cassert>
#include <cstdint>
#include <Eigen/Dense>

using Eigen::VectorXd;
using Eigen::MatrixXd;

enum odeint_method_t : uint8_t {
    EULER_EXPLICIT, 
    RK4,
};

class ODEInt {
    public: 
        /* CONSTRUCTORS */
        ODEInt(odeint_method_t , uint16_t ); 
        ODEInt(const ODEInt & ); 

        /* DESTRUCTORS */
        ~ODEInt(); 

        /* METHODS */
        MatrixXd ode_int(double , double , VectorXd , std::function<VectorXd(double, VectorXd )> ); 

    protected: 
        /* ATTRIBUTES */
        odeint_method_t ode_meth; 
        uint16_t T; /*!< Number of time steps */
        
        /* METHODS */
        MatrixXd rk1(VectorXd , VectorXd , std::function<VectorXd(double,VectorXd)> );
        MatrixXd rk4(VectorXd , VectorXd , std::function<VectorXd(double,VectorXd)> );
};

#endif